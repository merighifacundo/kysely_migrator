import {
    ColumnType,
    Generated,
    Insertable,
    JSONColumnType,
    Selectable,
    Updateable
  } from 'kysely'
  
  export interface Database {
    'digital_card.user': UserTable
    'digital_card.cardProfile': CardProfileTable
  }
  
  export interface UserTable {
    // Columns that are generated by the database should be marked
    // using the `Generated` type. This way they are automatically
    // made optional in inserts and updates.
    id: Generated<number>
  
    email: string

    first_name: string

    last_name: string | null

    login_data: unknown;
  
    // You can specify a different type for each operation (select, insert and
    // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
    // wrapper. Here we define a column `created_at` that is selected as
    // a `Date`, can optionally be provided as a `string` in inserts and
    // can never be updated:
    created_at: ColumnType<Date, string | undefined, never>
  
    // You can specify JSON columns using the `JSONColumnType` wrapper.
    // It is a shorthand for `ColumnType<T, string, string>`, where T
    // is the type of the JSON object/array retrieved from the database,
    // and the insert and update types are always `string` since you're
    // always stringifying insert/update values.
    metadata: JSONColumnType<{
      login_at: string;
      ip: string | null;
      agent: string | null;
      plan: 'free' | 'premium';
    }>
  }
  
  // You should not use the table schema interfaces directly. Instead, you should
  // use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
  // make sure that the correct types are used in each operation.
  export type User = Selectable<UserTable>
  export type NewUser = Insertable<UserTable>
  export type UpdateUser = Updateable<UserTable>
  
  export interface CardProfileTable {
    id: Generated<number>
    title: string
    second_line: string
    owner_id: number
  }
  
  export type CardProfile = Selectable<CardProfileTable>
  export type NewCardProfile = Insertable<CardProfileTable>
  export type UpdateCardProfile = Updateable<CardProfileTable>